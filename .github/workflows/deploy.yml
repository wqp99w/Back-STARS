name: Backend Upload ECR

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ steps.set-ecr.outputs.registry }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: ecr 로그인 정보 변수로 등록
        id: set-ecr
        run: |
          echo "ECR_REGISTRY is: [$ECR_REGISTRY]"
          echo "registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT
        env: # 이거 먼저 돌고 run 돔
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      - name: 자바 설치
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: kubeconfig 설정
        run: aws eks update-kubeconfig --region   ap-northeast-2 --name one-cluster

  external-info-service-build :
    needs: setup
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ needs.setup.outputs.ecr-registry }}
      IMAGE_TAG: 1.${{ github.run_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build & Push external-info-service
        run: |
          cd external-info-service
          echo "ECR_REGISTRY is: [$ECR_REGISTRY]"
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/external-info-service:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/external-info-service:$IMAGE_TAG $ECR_REGISTRY/external-info-service:latest
          
          docker push $ECR_REGISTRY/external-info-service:$IMAGE_TAG    
          docker push $ECR_REGISTRY/external-info-service:latest 
          
          kubectl set image deployment/external-info-service external-info-service=$ECR_REGISTRY/external-info-service:$IMAGE_TAG
          kubectl rollout status deployment/external-info-service

  place-service-build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ needs.setup.outputs.ecr-registry }}
      IMAGE_TAG: 1.${{ github.run_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build & Push place-service
        run: |
          cd place-service
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/place-service:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/place-service:$IMAGE_TAG $ECR_REGISTRY/place-service:latest
          
          docker push $ECR_REGISTRY/place-service:$IMAGE_TAG   
          docker push $ECR_REGISTRY/place-service:latest
          
          
          kubectl set image deployment/place-service place-service=$ECR_REGISTRY/place-service:$IMAGE_TAG
          kubectl rollout status deployment/place-service

  congestion-service-build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ needs.setup.outputs.ecr-registry }}
      IMAGE_TAG: 1.${{ github.run_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build & Push congestion-service
        run: |
          cd congestion-service
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/congestion-service:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/congestion-service:$IMAGE_TAG $ECR_REGISTRY/congestion-service:latest
          
          docker push $ECR_REGISTRY/congestion-service:$IMAGE_TAG    
          docker push $ECR_REGISTRY/congestion-service:latest
          
          kubectl set image deployment/congestion-service congestion-service=$ECR_REGISTRY/congestion-service:$IMAGE_TAG
          kubectl rollout status deployment/congestion-service

  gateway-build:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ needs.setup.outputs.ecr-registry }}
      IMAGE_TAG: 1.${{ github.run_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build & Push gateway
        run: |
          cd gateway
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/gateway:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/gateway:$IMAGE_TAG $ECR_REGISTRY/gateway:latest

          docker push $ECR_REGISTRY/gateway:$IMAGE_TAG    
          docker push $ECR_REGISTRY/gateway:latest
          
          kubectl set image deployment/gateway gateway=$ECR_REGISTRY/gateway:$IMAGE_TAG
          kubectl rollout status deployment/gateway
