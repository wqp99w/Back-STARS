name: Backend Upload ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '수동 배포'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - latest


jobs:
  upload-image:
    runs-on: ubuntu-latest
    env :
      IMAGE_TAG: ${{ github.run_number }}
    steps:
      - name: Set IMAGE_TAG based on input
        id: tag
        run: |
          if [ "${{ github.event.inputs.environment }}" = "all" ]; then
            echo "IMAGE_TAG=1.0.${{ github.run_number }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 자바 설치
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: place-service 빌드
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd place-service
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/place-service:$IMAGE_TAG .
          docker push $ECR_REGISTRY/place-service:$IMAGE_TAG  

      - name: congestion-service 빌드
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd congestion-service
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/congestion-service:$IMAGE_TAG .
          docker push $ECR_REGISTRY/congestion-service:$IMAGE_TAG    

      - name: external-info-service 빌드
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd external-info-service
          echo "${{ secrets.BACKEND_ENV}}" > .env
          gradle bootJar -x test
          docker build -t $ECR_REGISTRY/external-info-service:$IMAGE_TAG .
          docker push $ECR_REGISTRY/external-info-service:$IMAGE_TAG    
      

      - name: kubeconfig 설정
        run: aws eks update-kubeconfig --region   ap-northeast-2 --name one-cluster

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          kubectl set image deployment/external-info-service external-info-service=$ECR_REGISTRY/external-info-service:$IMAGE_TAG
          kubectl rollout status deployment/external-info-service
          
          kubectl set image deployment/place-service place-service=$ECR_REGISTRY/place-service:$IMAGE_TAG
          kubectl rollout status deployment/place-service
          
          kubectl set image deployment/congestion-service congestion-service=$ECR_REGISTRY/congestion-service:$IMAGE_TAG
          kubectl rollout status deployment/congestion-service